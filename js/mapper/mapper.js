jQuery.imageMapper = function(a) {    function b(b, d) {        if (M.mouse_down) {            c(b, d);            M.update_map()        }        if (!setStatus_Drawing() || !setStatus_Clicked())            return;        var e = M.ctx, h = d.x, i = d.y;        e.clearRect(0, 0, b.width, b.height);        a.each(M.shapes, function(a, b) {            if (a < M.shapes.length - 1 || !setStatus_Drawing())                o(e, b, M.curColor, M.lineWidth, b.fillColor, 0);            else                o(e, b, M.curColor, M.lineWidth, b.fillColor, d)        })    }    function c(b, c) {        var d = M.current - 1;        var e = M.shapes[d]["mousePos"];        var f = M.shapes[d];        var g = c.x - e.x;        var h = c.y - e.y;        if (M.points.length) {            a.each(M.points, function(a, b) {                M.points[a]["x"] = b.x + g;                M.points[a]["y"] = b.y + h            })        }        M.shapes[d]["mousePos"] = c;        switch (f.type) {            case "poly":                var i = true;                a.each(f, function(a, b) {                    if (b.x + g < 0 || b.x + g > M.theCanvas[0].width || b.y + h < 0 || b.y + h > M.theCanvas[0].height)                        i = false                });                a.each(f, function(a, b) {                    if (i) {                        M.shapes[d][a].x += g;                        M.shapes[d][a].y += h                    }                });                break;            case "rect":                if (M.shapes[d]["x_min"] + g >= 0 && M.shapes[d]["y_min"] + h >= 0 && M.shapes[d]["x_max"] + g <= M.theCanvas[0].width && M.shapes[d]["y_max"] + h <= M.theCanvas[0].height) {                    M.shapes[d]["point1"]["x"] += g;                    M.shapes[d]["point1"]["y"] += h;                    M.shapes[d]["point2"]["x"] += g;                    M.shapes[d]["point2"]["y"] += h;                    M.shapes[d]["x_min"] += g;                    M.shapes[d]["x_max"] += g;                    M.shapes[d]["y_min"] += h;                    M.shapes[d]["y_max"] += h                }                break;            case "circle":                if (M.shapes[d]["center"]["x"] + g >= 0 && M.shapes[d]["center"]["y"] + h >= 0 && M.shapes[d]["center"]["x"] + g < M.theCanvas[0].width && M.shapes[d]["center"]["y"] + h < M.theCanvas[0].height) {                    M.shapes[d]["center"]["x"] += g;                    M.shapes[d]["center"]["y"] += h                }                break;            default:                break        }        doCLearCanvas();        v()    }    function d(a, b) {        var c = a.getBoundingClientRect(), d = document.documentElement;        var e = b.clientY - c.top - d.scrollTop;        var f = b.clientX - c.left - d.scrollLeft;        var e = b.pageY - c.top - d.scrollTop;        var f = b.pageX - c.left - d.scrollLeft;        return {x: f,y: e}    }    function setStatus_Idle() {        return M.status == "idle"    }    function setStatus_Drawing() {        return M.status == "drawing"    }    function setStatus_Clicked() {        return M.mouse_clicked    }    function setStatus_edit() {        return M.status == "edit"    }    function doDrawCicle(a, b, c, d, e, f, g, h) {        if (!b)            return;        var i = b.x, j = b.y;        a.strokeStyle = d || a.strokeStyle;        a.lineWidth = e || a.lineWidth;        a.fillStyle = f || a.fillStyle;        if (!c) {            c = Math.sqrt((g["x"] - i) * (g["x"] - i) + (g["y"] - j) * (g["y"] - j));            doDrawLine(a, b, g, d, e)        }        a.beginPath();        a.arc(i, j, c, 0, 2 * Math.PI, false);        a.fill();        a.closePath();        a.stroke();        if (h) {            l(a, b, M.radius, M.curColor, M.lineWidth, M.curColor);            doDrawLine(a, b, {x: b.x + c,y: b.y}, d, e);            l(a, {x: b.x + c,y: b.y}, 4, M.curColor, M.lineWidth, M.curColor);            doDrawLine(a, b, {x: b.x - c,y: b.y}, d, e);            l(a, {x: b.x - c,y: b.y}, 4, M.curColor, M.lineWidth, M.curColor);            doDrawLine(a, b, {x: b.x,y: b.y + c}, d, e);            l(a, {x: b.x,y: b.y + c}, 4, M.curColor, M.lineWidth, M.curColor);            doDrawLine(a, b, {x: b.x,y: b.y - c}, d, e);            l(a, {x: b.x,y: b.y - c}, 4, M.curColor, M.lineWidth, M.curColor)        }    }    function doDrawLine(a, b, c, d, e) {        a.strokeStyle = d;        a.lineWidth = e;        a.beginPath();        a.moveTo(b["x"], b["y"]);        a.lineTo(c["x"], c["y"]);        a.closePath();        a.stroke()    }    function l(a, b, c, d, e, f) {        doDrawCicle(a, b, c, d, 1, f, 0)    }    function doDrawPoly(b, c, d, e, f, g, h) {        if (c.length == 0)            return;        var j = c[0];        b.beginPath();        b.moveTo(j["x"], j["y"]);        b.strokeStyle = d || b.strokeStyle;        b.fillStyle = f || b.fillStyle;        b.lineWidth = e;        for (i = 1; i < c.length; i++) {            b.lineTo(c[i]["x"], c[i]["y"])        }        if (g)            b.lineTo(g["x"], g["y"]);        b.lineTo(j["x"], j["y"]);        b.closePath();        b.fill();        b.stroke();        if (c.status == "drawing" || h) {            a.each(c, function(a, c) {                var d = h ? 4 : M.radius;                l(b, c, d, M.curColor, M.lineWidth, M.curColor)            })        }    }    function doDrawRect(a, b, c, d, e, f, g, h) {        a.strokeStyle = d || a.strokeStyle;        a.lineWidth = e || a.lineWidth;        a.fillStyle = f || a.fillStyle;        if (!c && b && g) {            var i = g.x - b.x, j = g.y - b.y, k = i / Math.abs(i), m = j / Math.abs(j);            a.strokeRect(b.x, b.y, i, j);            a.fillRect(b.x + e * k / 2, b.y + e * m / 2, i - e * k, j - e * m)        } else if (b && c) {            var i = c.x - b.x, j = c.y - b.y, k = i / Math.abs(i), m = j / Math.abs(j);            a.strokeRect(b.x, b.y, i, j);            a.fillRect(b.x + e * k / 2, b.y + e * m / 2, i - e * k, j - e * m)        } else            return;        if (h) {            l(a, b, 4, M.curColor, M.lineWidth, M.curColor);            l(a, c, 4, M.curColor, M.lineWidth, M.curColor);            l(a, {x: b.x,y: c.y}, 4, M.curColor, M.lineWidth, M.curColor);            l(a, {x: c.x,y: b.y}, 4, M.curColor, M.lineWidth, M.curColor)        }        a.beginPath();        a.arc(0, 0, 0, 0, 2 * Math.PI, false);        a.stroke()    }    function o(a, b, c, d, e, f, g) {        var g = g || false;        switch (b.type) {            case "poly":                doDrawPoly(a, b, c, d, e, f, g);                break;            case "rect":                doDrawRect(a, b.point1, b.point2, c, d, e, f, g);                break;            case "circle":                doDrawCicle(a, b["center"], b["radius"], c, d, e, f, g);                break;            default:                break        }    }    function p(a, b) {        return Math.sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y))    }    function q(a, b) {        for (var c = false, d = -1, e = a.length, f = e - 1; ++d < e; f = d)            (a[d].y <= b.y && b.y < a[f].y || a[f].y <= b.y && b.y < a[d].y) && b.x < (a[f].x - a[d].x) * (b.y - a[d].y) / (a[f].y - a[d].y) + a[d].x && (c = !c);        return c    }    function r(a, b) {        return b.x >= a.x_min && b.x <= a.x_max && b.y >= a.y_min && b.y <= a.y_max    }    function s(a, b) {        return p(a.center, b) <= a.radius    }    function t(a, b) {        a.type = a.type || "";        switch (a.type) {            case "poly":                return q(a, b);            case "rect":                return r(a, b);            case "circle":                return s(a, b)        }        return false    }    function doCLearCanvas(a, b) {        var a = a || M.theCanvas[0];        var b = b || M.ctx;        b.clearRect(0, 0, a.width, a.height)    }    function v(b) {        a.each(M.shapes, function(a, c) {            if (b) {                c.fillColor = b == "edit" ? M.fillSelect : M.fillColor;                c.status = b            }            o(M.ctx, c, M.curColor, M.lineWidth, c.fillColor, 0, M.current == a + 1)        })    }    function w() {        if (M.shapes.length) {            var a = M.shapes.pop();            if (a.length > 2 || a.modify)                M.shapes.push(a);            return M.shapes.length        }    }    function doUpdate_map() {        var b = M.targetw / M.theCanvas[0].width;        var c = M.targeth / M.theCanvas[0].height;        var d = (b + c) / 2;        if (!setStatus_Drawing())            w();        M.windowResizeHandler();        var e = M.result.find("textarea");        var g = M["mapname"] ? M["mapname"] : "";        var h = "<map name='" + g + "'>\n";        a.each(M.shapes, function(e, f) {            if (f.length) {                var g = "";                var i = f["areaurl"];                if (!i)                    i = "#";                var j = "'" + i + "'";                if (f["idname"])                    j += " name = '" + f["idname"] + "'";                if (f["classname"])                    j += " class = '" + f["classname"] + "'";                if (f["alttext"])                    j += " alt = '" + f["alttext"] + "' title = '" + f["alttext"] + "'";                if (f["areatarget"] && f["areatarget"] != "none")                    j += " target = '" + f["areatarget"] + "'";                switch (f.type) {                    case "poly":                        a.each(f, function(a, d) {                            if (a == 0)                                g = "'" + Math.floor(b * d["x"]) + ", " + Math.floor(c * d["y"]);                            else                                g = g + ", " + Math.floor(b * d["x"]) + ", " + Math.floor(c * d["y"])                        });                        h = h + "<area shape='poly' coords=" + g + "' href=" + j + " />\n";                        break;                    case "rect":                        g = "'" + Math.floor(b * f.point1["x"]) + ", " + Math.floor(c * f.point1["y"]) + ", " + Math.floor(b * f.point2["x"]) + ", " + Math.floor(c * f.point2["y"]);                        h = h + "<area shape='rect' coords=" + g + "' href=" + j + " />\n";                        break;                    case "circle":                        g = "'" + Math.floor(b * f.center["x"]) + ", " + Math.floor(c * f.center["y"]) + ", " + Math.floor(d * f.radius);                        h = h + "<area shape='circle' coords=" + g + "' href=" + j + " />\n";                        break;                    default:                        break                }            }        });        if (M["defaulturl"]) {            h += "<area shape='default' href='" + M["defaulturl"] + "'";            if (M["defaulttarget"] && M["defaulttarget"] != "none")                h += " target='" + M["defaulttarget"] + "'";            h += " />\n"        }        h += "</map>";        e.val(h)    }    function click_handler_html(a, c) {        var e = d(a, c);        var f = M.shapes.pop();        f.fillColor = M.fillColor;        switch (f.type) {            case "poly":                f.push({x: e.x,y: e.y});                l(M.ctx, e, M.radius, M.curColor, M.lineWidth, M.curColor);                M.shapes.push(f);                break;            case "circle":                if (!f["center"]) {                    f["center"] = {x: e.x,y: e.y};                    l(M.ctx, e, M.radius, M.curColor, M.lineWidth, M.curColor);                    M.shapes.push(f);                    if (c.fdi) {                        var g = M.shapes.length - 1;                        M.shapes[g]["areaurl"] = M.shapes[c.current - 1]["areaurl"];                        M.shapes[g]["alttext"] = M.shapes[c.current - 1]["alttext"];                        M.shapes[g]["idname"] = M.shapes[c.current - 1]["idname"];                        M.shapes[g]["classname"] = M.shapes[c.current - 1]["classname"];                        M.shapes[g]["areatarget"] = M.shapes[c.current - 1]["areatarget"];                        M.shapes.splice(c.current - 1, 1);                        b(M.theCanvas[0], {x: c.pageX2,y: c.pageY2});                        M.shapes[M.shapes.length - 1]["modify"] = true                    }                    break                }                var h = Math.round(p(e, f["center"]));                f["radius"] = h;                f.length = 3;                f.status = "edit";                M.mouse_clicked = false;                M.shapes.push(f);                if (!f.modify) {                    var i = new Array;                    i.type = "circle";                    i.status = "drawing";                    M.shapes.push(i)                } else                    M.stop.click();                M.update_map();                break;            case "rect":                if (!f["point1"]) {                    f["point1"] = {x: e.x,y: e.y};                    l(M.ctx, e, M.radius, M.curColor, M.lineWidth, M.curColor);                    M.shapes.push(f);                    if (c.fdi) {                        var g = M.shapes.length - 1;                        M.shapes[g]["areaurl"] = M.shapes[c.current - 1]["areaurl"];                        M.shapes[g]["alttext"] = M.shapes[c.current - 1]["alttext"];                        M.shapes[g]["idname"] = M.shapes[c.current - 1]["idname"];                        M.shapes[g]["classname"] = M.shapes[c.current - 1]["classname"];                        M.shapes[g]["areatarget"] = M.shapes[c.current - 1]["areatarget"];                        M.shapes.splice(c.current - 1, 1);                        b(M.theCanvas[0], {x: c.pageX2,y: c.pageY2});                        M.shapes[M.shapes.length - 1]["modify"] = true                    }                    break                }                f["point2"] = {x: e.x,y: e.y};                f.x_min = Math.min(f.point1.x, f.point2.x);                f.x_max = f.point1.x == f.x_min ? f.point2.x : f.point1.x;                f.y_min = Math.min(f.point1.y, f.point2.y);                f.y_max = f.point1.y == f.y_min ? f.point2.y : f.point1.y;                M.shapes.push(f);                f.length = 3;                f.status = "edit";                M.mouse_clicked = false;                if (!f.modify) {                    var j = new Array;                    j.type = "rect";                    j.status = "drawing";                    M.shapes.push(j)                } else                    M.stop.click();                M.update_map();                break;            default:                break        }        c.stopPropagation();        c.preventDefault()    }    function click_handler(c, e) {        var f = d(c, e), g;        a.each(M.points, function(c, d) {            if (s({center: d,radius: 4}, f)) {                g = M.points.current;                var h = M.shapes[g - 1];                var j = M.points.type;                M.status = "drawing";                M.current = 0;                M.area.addClass("hidden");                var k = M.theCanvas[0].getBoundingClientRect(), l = document.documentElement;                e.type = "mousedown";                var m = new jQuery.Event(e.type);                switch (j) {                    case "poly":                        var n = false;                        a.each(h, function(a, c) {                            if (c.x == d.x && c.y == d.y && !n) {                                n = true;                                var e;                                for (i = h.length - 1; i > a; i--) {                                    e = h.pop();                                    h.unshift(e)                                }                                h.pop();                                M.shapes[g - 1]["modify"] = true;                                M.shapes.splice(g - 1, 1);                                h.fillColor = M.fillColor;                                M.shapes.push(h);                                M.poly.click();                                w();                                b(M.theCanvas[0], {x: c.x,y: c.y})                            }                        });                        break;                    case "rect":                        var o = h.point1.x, p = h.point2.x, q = h.point1.y, r = h.point2.y, t, u, v, x;                        if (d.x == o) {                            t = p;                            u = d.y == q ? r : q;                            v = o;                            x = d.y == q ? q : r                        } else {                            t = o;                            u = d.y == r ? q : r;                            v = p;                            x = d.y == r ? r : q                        }                        m.pageX = t + k.left + l.scrollLeft;                        m.pageY = u + k.top + l.scrollTop;                        m.pageX2 = v;                        m.pageY2 = x;                        m.fdi = true;                        m.current = g;                        M.rect.click();                        M.theCanvas.trigger(m);                        break;                    case "circle":                        var t = h.center.x, u = h.center.y;                        m.pageX = t + k.left + l.scrollLeft;                        m.pageY = u + k.top + l.scrollTop;                        m.pageX2 = d.x;                        m.pageY2 = d.y;                        m.fdi = true;                        m.current = g;                        M.circle.click();                        M.theCanvas.trigger(m);                        break;                    default:                        break                }            }        });        if (g)            return;        a.each(M.shapes, function(b, c) {            if (t(c, f)) {                g = b + 1;                console.log('got it, its idname is ', c.idname);                M.area.removeClass("hidden");                M.remove.removeClass("hidden");                M.pencil.addClass("hidden");                a("#shape").val(c.type);                a("#areaurl").val(c.areaurl);                a("#alttext").val(c.alttext);                a("#idname").val(c.idname);                a("#classname").val(c.classname);                a("#areatarget").val(c.areatarget);                a("#shape").val(c.type)            } else {                M.shapes[b]["fillColor"] = M.fillColor;                M.shapes[b]["status"] = "idle"            }        });        if (g && g == M.current) {            M.mouse_down = true;            M.shapes[g - 1]["mousePos"] = f;            console.log('selected the map, but duplicate click self');            return        }        M.current = 0;        console.log('set selected to zero after click');        M.area.addClass("hidden");        M.pencil.removeClass("hidden");        M.remove.addClass("hidden");        if (g) {            var h = M.shapes[g - 1]["status"];            if (h == "selected") {                M.shapes[g - 1]["fillColor"] = M.fillColor;                M.shapes[g - 1]["status"] = "idle";                M.current = 0;                console.log('ha1')            } else {                M.shapes[g - 1]["fillColor"] = M.fillSelect;                M.shapes[g - 1]["status"] = "selected";                M.current = g;                M.area.removeClass("hidden");                M.remove.removeClass("hidden");                M.pencil.addClass("hidden");                console.log('selected the map')                var j = M.shapes[g - 1];                switch (j.type) {                    case "poly":                        a.each(j, function(a, b) {                            M.points[a] = {x: b.x,y: b.y}                        });                        break;                    case "rect":                        M.points[0] = {x: j["point1"]["x"],y: j["point1"]["y"]};                        M.points[1] = {x: j["point2"]["x"],y: j["point1"]["y"]};                        M.points[2] = {x: j["point1"]["x"],y: j["point2"]["y"]};                        M.points[3] = {x: j["point2"]["x"],y: j["point2"]["y"]};                        break;                    case "circle":                        M.points[0] = {x: j["center"]["x"] + j["radius"],y: j["center"]["y"]};                        M.points[1] = {x: j["center"]["x"] - j["radius"],y: j["center"]["y"]};                        M.points[2] = {x: j["center"]["x"],y: j["center"]["y"] - j["radius"]};                        M.points[3] = {x: j["center"]["x"],y: j["center"]["y"] + j["radius"]};                        break;                    default:                        break                }                M.points.current = g;                M.points.type = j.type            }        }        doCLearCanvas();        v()    }    M = {initialized: false,theCanvas: null,width: null,height: null,shapes: [],points: [],status: "edit",start: null,stop: null,rect: null,poly: null,circle: null,map: null,remove: null,pencil: null,edit: null,dashboard: null,area: null,targetw: null,targeth: null,result: null,xyInfo: null,ratio: 1,zoom: 1,radius: 2,lineWidth: 1,fillColor: "rgba(128, 128, 128, .5)",fillSelect: "rgba(128, 128, 128, .9)",border: 8,colors: ["rgba(255, 0, 0, 1)", "rgba(0, 255, 0, 1)", "rgba(0, 0, 0, 1)", "rgba(255, 255, 255, 1)", "rgba(0, 0, 255, 1)"],curColor: "rgba(255, 0, 0, 1)",ctx: null};    M.init = function(a) {        for (prop in a) {            M[prop] = a[prop]        }        M.width = M.theCanvas[0].width;        M.height = M.theCanvas[0].height;        M.ctx = M.theCanvas[0].getContext("2d");        M.shapes = [];        M.points = [];        if (!M.initialized) {            M.drawRect = doDrawRect;            M.drawCircle = doDrawCicle;            M.drawPoly = doDrawPoly;            M.drawLine = doDrawLine;            M.clearCanvas = doCLearCanvas;            M.update_map = doUpdate_map;            M.setEvents();            M.initialized = true        }    };    M.setParam = function(a, b) {        if (a == "mapname" || a == "defaulturl" || a == "defaulttarget") {            M[a] = b;            return        }        if (!M.current || !a || !b)            return;        if (a != "areaurl" && a != "alttext" && a != "idname" && a != "classname" && a != "areatarget")            return;        M.shapes[M.current - 1][a] = b    };    M.scaleShapes = function() {        var b = M.ratio;        a.each(M.shapes, function(c, d) {            if (d.length) {                switch (d.type) {                    case "poly":                        a.each(d, function(a, c) {                            d[a]["x"] *= b;                            d[a]["y"] *= b                        });                        break;                    case "rect":                        d["point1"]["x"] *= b;                        d["point1"]["y"] *= b;                        d["point2"]["x"] *= b;                        d["point2"]["y"] *= b;                        d["x_min"] *= b;                        d["x_max"] *= b;                        d["y_min"] *= b;                        d["y_max"] *= b;                        break;                    case "circle":                        d["center"]["x"] *= b;                        d["center"]["y"] *= b;                        d["radius"] *= b;                        break;                    default:                        brteak                }            }        });        doCLearCanvas();        v()    };    M.selectColor = function(b, c) {        var e = d(b, c);        var f = b.width, g = b.height;        var h = [{x: f / 6,y: g / 6}, {x: 5 * f / 6,y: g / 6}, {x: f / 6,y: 5 * g / 6}, {x: 5 * f / 6,y: 5 * g / 6}];        a.each(h, function(a, b) {            if (s({center: b,radius: f / 4}, e)) {                M.curColor = M.colors[a + 1];                var c = M.colors[0];                M.colors[0] = M.colors[a + 1];                M.colors[a + 1] = c;                doCLearCanvas();                v()            }        })    };    M.hideShowMap = function(a) {        if (a == "hide") {            M.load.addClass("hidden");            M.hide.addClass("hidden");            M.result.addClass("hidden");            M.map.addClass("hidden")        } else {            M.map.removeClass("hidden");            M.load.addClass("hidden");            M.hide.addClass("hidden");            M.result.addClass("hidden")        }    };    M.windowResizeHandler = function() {        try {            M.result.css("width", "-moz-available")        } catch (b) {        }        var c = M.result[0];        var d = c.style.width.indexOf("-moz-available") > -1;        if (!d) {            var e = a("#body").width();            M.result.css({width: e - 217 + "px"}).find("textarea").css({width: e - 231 + "px"})        }    };    M.setEvents = function() {        if (M.start) {            M.start.on("click", function() {                M.status = "drawing";                w();                var b = new Array;                b.type = a(this).attr("id");                b.status = "drawing";                M.shapes.push(b);                a.each(M.shapes, function(a, b) {                    b["fillColor"] = M.fillColor;                    b["status"] = "idle"                });                M.current = 0;                M.area.addClass("hidden");                M.pencil.removeClass("hidden");                M.remove.addClass("hidden");                doCLearCanvas();                v();                var c = 0            })        }        if (M.stop) {            M.stop.on("click", function() {                M.status = "edit";                var a = w();                M.current = 0;                console.log('set selected to zero');                M.area.addClass("hidden");                M.pencil.removeClass("hidden");                M.remove.addClass("hidden");                doCLearCanvas();                v("idle");                M.mouse_clicked = false            })        }        if (M.edit) {            M.edit.on("click", function() {                M.stop.trigger("click");                M.status = "edit"            })        }        if (M.remove) {            M.remove.on("click", function() {                var a = M.current - 1;                M.shapes.splice(a, 1);                M.current = 0;                M.area.addClass("hidden");                M.pencil.removeClass("hidden");                M.remove.addClass("hidden");                M.update_map();                doCLearCanvas();                v()            })        }        if (M.map) {            M.map.on("click", function() {                M.update_map();                M.result.removeClass("hidden").find("textarea").removeClass("hidden")            })        }        if (M.load) {            M.load.on("click", function() {                var b = M.result.find("textarea").val();                var c = b.split("\n");                M.shapes = [];                var d = M.theCanvas[0].width / M.targetw;                var e = M.theCanvas[0].height / M.targeth;                var f = (d + e) / 2;                a.each(c, function(b, c) {                    if (/\<map name/ig.test(c)) {                        if (/name\s*=\s*/ig.test(c)) {                            var x = /name\s*=\s*\'([^\']+)/ig.exec(c);                            x = x[1];                            $('#mapname').val(x);                            M.setParam("mapname", x);                        }                    }                    if (/area/ig.test(c)) {                        var g = /shape\s*=\s*\'([^\']+)\'\s*coords\s*=\s*\'([^\']+)\'\s*href\s*=\s*\'([^\']+)/ig;                        result = g.exec(c);                        if (result) {                            var h = result[1];                            var j = result[2];                            var k = result[3] == "#" ? "" : result[3]                        } else {                            g = /shape\s*=\s*\'([^\']+)\'\s*href\s*=\s*\'([^\']+)/ig;                            result = g.exec(c);                            var h = result[1];                            var k = result[2] == "#" ? "" : result[2]                        }                        if (/name\s*=\s*/ig.test(c)) {                            var l = /name\s*=\s*\'([^\']+)/ig.exec(c);                            l = l[1]                        }                        if (/class\s*=\s*/ig.test(c)) {                            var m = /class\s*=\s*\'([^\']+)/ig.exec(c);                            m = m[1]                        }                        if (/alt\s*=\s*/ig.test(c)) {                            var n = /alt\s*=\s*\'([^\']+)/ig.exec(c);                            n = n[1]                        }                        if (/target\s*=\s*/ig.test(c)) {                            var o = /target\s*=\s*\'([^\']+)/ig.exec(c);                            o = o[1]                        }                        if (j)                            var p = j.split(", ");                        switch (h) {                            case "poly":                                var q = [];                                q.type = "poly";                                for (i = 0; i < p.length - 1; i += 2) {                                    var r = d * p[i];                                    var s = e * p[i + 1];                                    if (r < 0)                                        r = 0;                                    if (s < 0)                                        s = 0;                                    if (r > M.theCanvas[0].width)                                        r = M.theCanvas[0].width;                                    if (s > M.theCanvas[0].height)                                        s = M.theCanvas[0].height;                                    q.push({x: r,y: s})                                }                                q.areaurl = k;                                if (l)                                    q.idname = l;                                if (m)                                    q.classname = m;                                if (n)                                    q.alttext = n;                                if (o)                                    q.areatarget = o;                                q.fillColor = M.fillColor;                                M.shapes.push(q);                                break;                            case "rect":                                var t = new Array;                                t.type = "rect";                                t.point1 = {x: d * p[0],y: e * p[1]};                                t.point2 = {x: d * p[2],y: e * p[3]};                                if (t.point1.x > M.theCanvas[0].width)                                    t.point1.x = M.theCanvas[0].width;                                if (t.point1.y > M.theCanvas[0].height)                                    t.point1.y = M.theCanvas[0].height;                                if (t.point2.x > M.theCanvas[0].width)                                    t.point2.x = M.theCanvas[0].width;                                if (t.point2.y > M.theCanvas[0].height)                                    t.point2.y = M.theCanvas[0].height;                                if (t.point1.x < 0)                                    t.point1.x = 0;                                if (t.point1.y < 0)                                    t.point1.y = 0;                                if (t.point2.x < 0)                                    t.point2.x = 0;                                if (t.point2.y < 0)                                    t.point2.y = 0;                                t.x_min = Math.min(t.point1.x, t.point2.x);                                t.x_max = t.point1.x == t.x_min ? t.point2.x : t.point1.x;                                t.y_min = Math.min(t.point1.y, t.point2.y);                                t.y_max = t.point1.y == t.y_min ? t.point2.y : t.point1.y;                                t.areaurl = k;                                if (l)                                    t.idname = l;                                if (m)                                    t.classname = m;                                if (n)                                    t.alttext = n;                                if (o)                                    t.areatarget = o;                                t.length = 3;                                t.fillColor = M.fillColor;                                M.shapes.push(t);                                break;                            case "circle":                                var u = [];                                u.type = "circle";                                var r = d * p[0];                                var s = e * p[1];                                if (r < 0)                                    r = 0;                                if (s < 0)                                    s = 0;                                if (r > M.theCanvas[0].width)                                    r = M.theCanvas[0].width;                                if (s > M.theCanvas[0].height)                                    s = M.theCanvas[0].height;                                u.center = {x: r,y: s};                                u.radius = f * p[2];                                u.areaurl = k;                                if (l)                                    u.idname = l;                                if (m)                                    u.classname = m;                                if (n)                                    u.alttext = n;                                if (o)                                    u.areatarget = o;                                u.length = 3;                                u.fillColor = M.fillColor;                                M.shapes.push(u);                                break;                            default:                                a("#defaulturl").val(k);                                a("#defaulttarget").val(o);                                M.setParam("defaulturl", k);                                M.setParam("defaulttarget", o);                                break                        }                    }                });                console.log('loaded %d shapes', M.shapes.length);                M.stop.click();                doCLearCanvas();                v()            })        }        if (M.theCanvas) {            M.theCanvas.parent().on("click dblclick mousedown mousemove", function(a) {                var b = d(this, a);                var c = b.x, e = b.y, f = M.border, g = M.theCanvas[0].width, h = M.theCanvas[0].height;                while (true) {                    if (r({x_min: f,x_max: g + f,y_min: f,y_max: h + f}, b))                        return false;                    if (c < f && e < f) {                        c = 0;                        e = 0;                        break                    }                    if (c > g + f && e < f) {                        c = g;                        e = 0;                        break                    }                    if (c > g + f && e > h + f) {                        c = g;                        e = h;                        break                    }                    if (c < f && e > h + f) {                        c = 0;                        e = h;                        break                    }                    if (c < f) {                        c = 0;                        e -= f;                        break                    }                    if (e < f) {                        c -= f;                        e = 0;                        break                    }                    if (c > g + f) {                        c = g;                        e -= f;                        break                    }                    if (e > h + f) {                        c -= f;                        e = h;                        break                    }                }                if (a.type == "mousedown") {                    var i = 0                }                var j = M.theCanvas[0].getBoundingClientRect(), k = document.documentElement;                if (a.type == "mousemove")                    a.type = "mouseenter";                var l = new jQuery.Event(a.type);                l.pageX = c + j.left + k.scrollLeft;                l.pageY = e + j.top + k.scrollTop;                M.theCanvas.trigger(l);                return false            });            M.theCanvas.parent().on("mouseleave", function(a) {                var b = d(this, a);                var c = b.x, e = b.y, f = M.border, g = M.theCanvas[0].width, h = M.theCanvas[0].height;                if (c <= 0 || e <= 0 || c >= g + 2 * f || e >= h + 2 * f) {                    M.theCanvas.trigger("canvas_leave")                }            });            M.theCanvas.on("mousemove mouseenter", function(c) {                M.xyInfo.removeClass("hidden");                var e = d(this, c);                M.xyInfo.html("Mouse position: " + e.x + "," + e.y);                b(this, e);                M.theCanvas.removeClass("cursor_move").removeClass("cursor_pointer");                if (M.current) {                    var f = M.shapes[M.current - 1];                    if (t(f, e))                        M.theCanvas.addClass("cursor_move");                    a.each(M.points, function(a, b) {                        if (s({center: b,radius: 4}, e))                            M.theCanvas.removeClass("cursor_move").addClass("cursor_pointer")                    })                }            });            M.theCanvas.on("canvas_leave", function(a) {                M.xyInfo.addClass("hidden");                var b = M.ctx;                b.clearRect(0, 0, this.width, this.height);                v()            });            M.theCanvas.on("mousedown", function(a) {                M.mouse_clicked = true;                console.log('down')                if (setStatus_Drawing()){                    return click_handler_html(this, a);                }                if (setStatus_edit()){                    return click_handler(this, a)                }            });            M.theCanvas.on("dblclick", function(a) {                if (!setStatus_Drawing())                    return false;                var b = M.shapes.pop();                if (b.type != "poly")                    return false;                if (b.length < 4) {                    var c = new Array;                    c.type = "poly";                    c.status = "drawing";                    M.shapes.push(c);                    M.mouse_clicked = false;                    return false                }                b.pop();                b.pop();                var e = d(this, a);                b.push({x: e.x,y: e.y});                l(M.ctx, e, M.radius, M.curColor, M.lineWidth, M.curColor);                b.status = "edit";                M.mouse_clicked = false;                M.shapes.push(b);                if (!b["modify"]) {                    var c = new Array;                    c.type = "poly";                    c.status = "drawing";                    M.shapes.push(c)                } else                    M.stop.click();                M.update_map();                return false            });            M.theCanvas.on("mouseup", function(a) {                M.mouse_down = false            })        }    };    return M}(jQuery);